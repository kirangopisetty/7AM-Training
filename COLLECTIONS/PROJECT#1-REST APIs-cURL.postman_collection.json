{
	"info": {
		"_postman_id": "07b56fd5-7f8c-47b5-8fbb-8b2bbd4efdc7",
		"name": "PROJECT#1-REST APIs-cURL",
		"description": "⦁ Type of APIs: REST APIs  \n⦁ Classification of APIs: Public APIs + Secured/Authorized APIs  \n⦁ Algorithm used for authorization: Bearer access token  \n⦁ API documentation format: cURL  \n⦁ API documentation URL: [https://gorest.co.in/](https://gorest.co.in/)  \n⦁ # of APIs developed: 4  \n⦁ HTTP methods used: GET, POST, PATCH, DELETE  \n⦁ How to get bearer access token: login to [https://gorest.co.in/](https://gorest.co.in/)  \n⦁ Description about APIs:  \n⦁ LIST USERS : This is a REST API that uses GET http method, to retrieve all the existing users from the database in a json format.  \nExp result: 200 OK ; Content-Type: application/json ; response time: 3 seconds  \n⦁ CREATE USER : This is a REST API that uses POST http method, to create a new user in the database, in a json format  \nExp result: 201 Created ; Content-Type: application/json ; response time: 2 seconds  \n⦁ UPDATE USER : This is a REST API that uses PATCH http method, to update an existing user in the database, in a json format  \nExp result: 200 OK ; Content-Type: application/json ; response time: 2 seconds  \n⦁ DELETE USER : This is a REST API that uses DELETE http method, to delete an existing user in the database  \nExp result: 204 No Content ; empty response body ; response time: 2 seconds",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522",
		"_collection_link": "https://kiranmm.postman.co/workspace/7AM-TRAINING~ce67243d-296f-4730-af59-177591369d3a/collection/5040522-07b56fd5-7f8c-47b5-8fbb-8b2bbd4efdc7?action=share&source=collection_link&creator=5040522"
	},
	"item": [
		{
			"name": "POSITIVE TC",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Swetha\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"swetha@yahoo.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kiran-Trainer\",\r\n    \"email\": \"kiran@postman.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8048384",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8048384"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8050339",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8050339"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder does Smoke Tests and it contains positive test cases to test the below REST APIs:\n\n1. LIST USERS-GET API\n    \n2. CREATE USER-POST API\n    \n3. UPDATE USER-PATCH API\n    \n4. DELETE USER-DELETE API"
		},
		{
			"name": "API CHAINING",
			"item": [
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"// capture the required fields into local variables\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"var extractedName = pm.response.json().name;\r",
									"var extractedEmail = pm.response.json().email;\r",
									"var extractedStatus = pm.response.json().status;\r",
									"\r",
									"// convert the local variables into global variables\r",
									"\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									"pm.globals.set(\"globalExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalExtractedStatus\", extractedStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalExtractedName}}\",\r\n    \"email\": \"{{globalExtractedEmail}}\",\r\n    \"status\": \"{{globalExtractedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "Extracting the response of an API and supplying it as request to another dependent API is called as API chaining"
		},
		{
			"name": "E2E API TESTING",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"// capture the required fields into local variables\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"var extractedName = pm.response.json().name;\r",
									"var extractedEmail = pm.response.json().email;\r",
									"var extractedStatus = pm.response.json().status;\r",
									"\r",
									"// convert the local variables into global variables\r",
									"\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									"pm.globals.set(\"globalExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalExtractedStatus\", extractedStatus);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is created\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is created\r",
									"\r",
									"pm.test(\"Verify if user is created with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is created with name : \"+pm.globals.get(\"globalExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Update the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"\r",
									"var extractedUpdatedName = pm.response.json().name;\r",
									"pm.globals.set(\"globalUpdatedExtractedName\", extractedUpdatedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is updated\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalExtractedName}}\",\r\n    \"email\": \"{{globalExtractedEmail}}\",\r\n    \"status\": \"{{globalExtractedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is updated\r",
									"\r",
									"pm.test(\"Verify if user is updated with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Delete the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is deleted\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is deleted\r",
									"\r",
									"pm.test(\"Verify if user is deleted with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is deleted with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "Create a user (POST) > Verify if user is created (GET) > Update the created user (PATCH) > Verify if user is updated (GET) > Delete the created user (DELETE) > Verify if user is deleted (GET)"
		},
		{
			"name": "ENVIRONMENT VARIABLES",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"// capture the required fields into local variables\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"var extractedName = pm.response.json().name;\r",
									"var extractedEmail = pm.response.json().email;\r",
									"var extractedStatus = pm.response.json().status;\r",
									"\r",
									"// convert the local variables into global variables\r",
									"\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									"pm.globals.set(\"globalExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalExtractedStatus\", extractedStatus);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is created\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varEnvName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{varEnvEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is created\r",
									"\r",
									"pm.test(\"Verify if user is created with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is created with name : \"+pm.globals.get(\"globalExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Update the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"\r",
									"var extractedUpdatedName = pm.response.json().name;\r",
									"pm.globals.set(\"globalUpdatedExtractedName\", extractedUpdatedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is updated\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalExtractedName}}\",\r\n    \"email\": \"{{globalExtractedEmail}}\",\r\n    \"status\": \"{{globalExtractedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users/{{globalExtractedID}}",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is updated\r",
									"\r",
									"pm.test(\"Verify if user is updated with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Delete the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is deleted\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users/{{globalExtractedID}}",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is deleted\r",
									"\r",
									"pm.test(\"Verify if user is deleted with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is deleted with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varEnvUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{varEnvProtocol}}://{{varEnvURL}}/public/v2/users",
							"protocol": "{{varEnvProtocol}}",
							"host": [
								"{{varEnvURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "Environment variables : _scope is across all the collections in the same workspace and the context here is environment specific_"
		},
		{
			"name": "PERFORMANCE TESTING",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"// capture the required fields into local variables\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"var extractedName = pm.response.json().name;\r",
									"var extractedEmail = pm.response.json().email;\r",
									"var extractedStatus = pm.response.json().status;\r",
									"\r",
									"// convert the local variables into global variables\r",
									"\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									"pm.globals.set(\"globalExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalExtractedStatus\", extractedStatus);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is created\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is created\r",
									"\r",
									"pm.test(\"Verify if user is created with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is created with name : \"+pm.globals.get(\"globalExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Update the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// API CHAINING\r",
									"\r",
									"var extractedUpdatedName = pm.response.json().name;\r",
									"pm.globals.set(\"globalUpdatedExtractedName\", extractedUpdatedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is updated\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalExtractedName}}\",\r\n    \"email\": \"{{globalExtractedEmail}}\",\r\n    \"status\": \"{{globalExtractedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is updated\r",
									"\r",
									"pm.test(\"Verify if user is updated with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Delete the created user\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"Verify if user is deleted\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// Verify if user is deleted\r",
									"\r",
									"pm.test(\"Verify if user is deleted with id : \"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is deleted with name : \"+pm.globals.get(\"globalUpdatedExtractedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalUpdatedExtractedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");  // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Postman tool can be used to test the APIs performance upto a limit of vUsers=100\n    \n- We capture the response times\n    \n- We also capture the response code & ensure it is always 2xx"
		},
		{
			"name": "INTEROPERABILITY TESTING",
			"item": [
				{
					"name": "LIST USERS - Windows OS + Edge browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/138.0.3351.121",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER-Linux OS + Firefox browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (X11; Linux i686; rv:141.0) Gecko/20100101 Firefox/141.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Swetha\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"swetha1@yahoo.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER-Mac OS + Safari browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kiran-Trainer\",\r\n    \"email\": \"kiran@postman.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8048384",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8048384"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER-Android OS + Chrome browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.7204.180 Mobile Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8055175",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8055175"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verify if the server responds with 2xx response code when the APIs are tested across various OS, browser(s) version(s).  \nIf we customize User'-Agent' request header, we can achieve interoperability testing.  \n⦁ Windows OS + Edge browser  \n⦁ Linux OS + Firefox browser  \n⦁ Mac OS + Safari browser  \n⦁ Android OS + Chrome browser  \n⦁ iPhone OS + Safari browser"
		},
		{
			"name": "DDT-FUNCTIONS",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8062502",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8062502"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8055175",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8055175"
							]
						}
					},
					"response": []
				}
			],
			"description": "Supplying different test data using Postman built-in functions to test an API & validate its response code\n\n[<u>https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/</u>](https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/)"
		},
		{
			"name": "GLOBAL VARIABLES",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"{{varGgender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{varGstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"pm.globals.unset(\"varGupdatedID\");\r",
									"console.log(\"The value of varGupdatedID after deletion is >> \"+pm.globals.get(\"varGupdatedID\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"varGupdatedID\", \"8072993\"); // create a global variable\r",
									"console.log(\"The value of varGupdatedID before deletion is >> \"+pm.globals.get(\"varGupdatedID\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varGupdatedName}}\",\r\n    \"email\": \"{{varGupdatedEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varGupdatedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varGupdatedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"varGidToDelete\", \"8072992\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varGidToDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varGidToDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Global variables : _scope is across all the collections in the same workspace_"
		},
		{
			"name": "COLLECTION VARIABLES",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"{{varCgender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{varCstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varCname}}\",\r\n    \"email\": \"{{varCemail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/8072992",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"8072992"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"varCIdToDelete\", \"8072294\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varCIdToDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varCIdToDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection variables : _scope is to the collection itself_"
		},
		{
			"name": "DDT-CSV & FUNCTIONS",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"{{varGender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{varStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{varUpdatedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varUpdatedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varUpdatedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varIDtoDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varIDtoDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Supplying different test data from an external data source such as .csv, to test an API & validate its response code\n\nSupplying different test data using Postman built-in functions to test an API & validate its response code\n\n[<u>https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/</u>](https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/)"
		},
		{
			"name": "DDT-CSV",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Swetha & email=swetha@yahoo.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Swetha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"swetha@yahoo.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varName}}\",\r\n    \"gender\": \"{{varGender}}\",\r\n    \"email\": \"{{varEmail}}\",\r\n    \"status\": \"{{varStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body received is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// ENUM VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if name=Kiran-Trainer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Kiran-Trainer\");\r",
									"});\r",
									"\r",
									"// PRINT RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(pm.response.code);\r",
									"console.log(pm.response.status);\r",
									"console.log(pm.response.code+\" \"+pm.response.status);\r",
									"console.log(pm.response.responseTime+\" ms\");\r",
									"console.log(pm.response.size());\r",
									"console.log(pm.response.headers);\r",
									"console.log(pm.response.json());\r",
									"console.log(pm.response.text());\r",
									"\r",
									"// PRINT REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(pm.request.method);\r",
									"console.log(pm.request.url);\r",
									"console.log(pm.request.body);\r",
									"console.log(pm.request.headers);\r",
									"console.log(pm.request.size());\r",
									"console.log(pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varUpdatedName}}\",\r\n    \"email\": \"{{varUpdatedEmail}}\",\r\n    \"status\": \"{{varUpdatedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varUpdatedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varUpdatedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if the response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if the response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if the response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project specific details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varIDtoDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varIDtoDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verify if the server responds with 2xx response code when the APIs are tested across various OS, browser(s) version(s).  \nIf we customize User'-Agent' request header, we can achieve interoperability testing.  \n⦁ Windows OS + Edge browser  \n⦁ Linux OS + Firefox browser  \n⦁ Mac OS + Safari browser  \n⦁ Android OS + Chrome browser  \n⦁ iPhone OS + Safari browser"
		},
		{
			"name": "NEGATIVE TC",
			"item": [
				{
					"name": "UNSUPPORTED HTTP METHODS",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran-Trainer\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/8065670",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"8065670"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/8065595",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"8065595"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test the given API with an invalid/unsupported http method to validate if server returns 4xx response code \\[405\\]"
				},
				{
					"name": "BROKEN ENDPOINTS TESTING",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Swetha\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomFirstName}}@yahoo.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran-Trainer\",\r\n    \"email\": \"{{$randomFirstName}}@postman.com\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/8065594",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"8065594"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/8064667",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"8064667"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test the given API with an invalid endPoint to validate if server returns 4xx response code"
				},
				{
					"name": "PAYLOAD TAMPERING TESTING",
					"item": [
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"!@#$%^&*()_+    0987654321\",       // invalid data type\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomFirstName}}@yahoo.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA LENGTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha Swetha\",                   // invalid data length\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomFirstName}}@yahoo.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA FIELD NAME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"first name\": \"Swetha\",                         // invalid data field name\r\n    \"sex\": \"female\",                                // invalid data field name\r\n    \"email id\": \"{{$randomFirstName}}@yahoo.com\",   // invalid data field name\r\n    \"status of user\": \"active\"                      // invalid data field name\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test the given API with an invalid payload such as _invalid data type, data length, data field name_ etc to validate if server returns 4xx response code"
				}
			],
			"description": "This folder does Regression Tests and it contains negative test cases to test the below REST APIs:\n\n1. LIST USERS-GET API\n    \n2. CREATE USER-POST API\n    \n3. UPDATE USER-PATCH API\n    \n4. DELETE USER-DELETE API"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "varCgender",
			"value": "male",
			"type": "default"
		},
		{
			"key": "varCstatus",
			"value": "inactive",
			"type": "default"
		},
		{
			"key": "varCname",
			"value": "Kiran",
			"type": "string"
		},
		{
			"key": "varCemail",
			"value": "postman@testing.com",
			"type": "string"
		},
		{
			"key": "varCIdToDelete",
			"value": ""
		}
	]
}